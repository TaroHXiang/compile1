
;; Function main (main, funcdef_no=1988, decl_uid=49708, cgraph_uid=456, symbol_order=493)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =m  (1) m  (2) =&r {stack_protect_set_1_di}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            alt=1: Bad operand -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 6:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 17:  (0) r  (1) 0  (2) BMr {*mulsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) m  (2) m  (3) =&r {stack_protect_test_1_di}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 6
   Insn 47: point = 0, n_alt = 0
  BB 7
   Insn 51: point = 0, n_alt = -1
   Insn 50: point = 0, n_alt = -2
  BB 5
   Insn 46: point = 2, n_alt = -1
   Insn 45: point = 2, n_alt = 0
   Insn 41: point = 4, n_alt = -2
   Insn 38: point = 6, n_alt = 0
   Insn 37: point = 7, n_alt = 0
   Insn 36: point = 7, n_alt = -2
   Insn 35: point = 8, n_alt = -2
   Insn 34: point = 9, n_alt = -2
   Insn 33: point = 11, n_alt = 3
   Insn 32: point = 12, n_alt = -2
   Insn 31: point = 13, n_alt = 0
   Insn 30: point = 13, n_alt = -2
   Insn 29: point = 14, n_alt = 4
   Insn 28: point = 15, n_alt = -2
   Insn 27: point = 16, n_alt = 0
  BB 4
   Insn 25: point = 17, n_alt = -1
   Insn 24: point = 17, n_alt = 0
   Insn 22: point = 18, n_alt = 0
  BB 2
   Insn 55: point = 19, n_alt = -1
   Insn 12: point = 19, n_alt = 1
   Insn 11: point = 19, n_alt = 1
   Insn 10: point = 19, n_alt = 0
   Insn 9: point = 19, n_alt = -2
   Insn 8: point = 20, n_alt = 4
   Insn 7: point = 21, n_alt = -2
   Insn 6: point = 22, n_alt = 3
   Insn 3: point = 23, n_alt = 0
  BB 3
   Insn 19: point = 25, n_alt = 0
   Insn 18: point = 25, n_alt = 1
   Insn 17: point = 26, n_alt = 2
   Insn 16: point = 28, n_alt = 0
 r82: [17..18]
 r83: [7..12]
 r84: [5..6]
 r85: [0..4]
 r86: [21..22]
 r87: [19..20]
 r88: [25..26]
 r89: [27..28]
 r90: [15..16]
 r91: [13..14]
 r92: [8..9]
 r93: [10..11]
 r95: [23..24]
 r96: [2..3]
Compressing live ranges: from 29 to 24 - 82%
Ranges after the compression:
 r82: [12..13]
 r83: [4..7]
 r84: [2..3]
 r85: [0..1]
 r86: [16..17]
 r87: [14..15]
 r88: [20..21]
 r89: [22..23]
 r90: [10..11]
 r91: [8..9]
 r92: [4..5]
 r93: [6..7]
 r95: [18..19]
 r96: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 22
changing reg in insn 24
changing reg in insn 32
changing reg in insn 36
changing reg in insn 38
changing reg in insn 41
changing reg in insn 41
changing reg in insn 50
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 33
changing reg in insn 34
changing reg in insn 3
changing reg in insn 45
deleting insn with uid = 32.
deleting insn with uid = 34.
deleting insn with uid = 41.
deleting insn with uid = 50.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 47.


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={14d,10u} r1={7d,1u} r2={5d} r4={8d,3u} r5={8d,3u} r6={1d,20u} r7={1d,11u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={10d,2u} r18={4d} r19={1d,1u} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 360{309d,51u,0e} in 30{26 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 6 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [4 D.53841+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 0 ax [95])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "factorial.cpp":4:1 1382 {stack_protect_set_1_di}
     (nil))
(insn 6 3 7 2 (parallel [
            (set (reg:DI 0 ax [86])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) "factorial.cpp":6:9 247 {*adddi_1}
     (nil))
(insn 7 6 8 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [86])) "factorial.cpp":6:9 82 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [87])
        (symbol_ref:DI ("_ZSt3cin") [flags 0x40]  <var_decl 0x7f23e54a1870 cin>)) "factorial.cpp":6:9 82 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [87])) "factorial.cpp":6:9 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("_ZSt3cin") [flags 0x40]  <var_decl 0x7f23e54a1870 cin>)
        (nil)))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSirsERi") [flags 0x41]  <function_decl 0x7f23e53f8400 operator>>>) [0 operator>> S1 A8])
            (const_int 0 [0]))) "factorial.cpp":6:9 1013 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 11 10 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [5 i+0 S4 A64])
        (const_int 2 [0x2])) "factorial.cpp":7:4 83 {*movsi_internal}
     (nil))
(insn 12 11 55 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [5 f+0 S4 A32])
        (const_int 1 [0x1])) "factorial.cpp":8:4 83 {*movsi_internal}
     (nil))
(jump_insn 55 12 56 2 (set (pc)
        (label_ref 20)) "factorial.cpp":9:2 996 {jump}
     (nil)
 -> 20)
(barrier 56 55 23)
(code_label 23 56 15 3 3 (nil) [1 uses])
(note 15 23 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [5 f+0 S4 A32])) "factorial.cpp":11:5 83 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:SI 0 ax [88])
                (mult:SI (reg:SI 0 ax [89])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [5 i+0 S4 A64])))
            (clobber (reg:CC 17 flags))
        ]) "factorial.cpp":11:5 469 {*mulsi3_1}
     (nil))
(insn 18 17 19 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [5 f+0 S4 A32])
        (reg:SI 0 ax [88])) "factorial.cpp":11:5 83 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [5 i+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [5 i+0 S4 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "factorial.cpp":12:5 246 {*addsi_1}
     (nil))
(code_label 20 19 21 4 2 (nil) [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 24 4 (set (reg:SI 0 ax [orig:82 n.0_1 ] [82])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [5 n+0 S4 A32])) "factorial.cpp":9:11 83 {*movsi_internal}
     (nil))
(insn 24 22 25 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [5 i+0 S4 A64])
            (reg:SI 0 ax [orig:82 n.0_1 ] [82]))) "factorial.cpp":9:11 11 {*cmpsi_1}
     (nil))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "factorial.cpp":9:11 995 {*jcc}
     (nil)
 -> 23)
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg:SI 0 ax [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [5 f+0 S4 A32])) "factorial.cpp":14:10 83 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [90])) "factorial.cpp":14:10 83 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:DI 0 ax [91])
        (symbol_ref:DI ("_ZSt4cout") [flags 0x40]  <var_decl 0x7f23e54a1990 cout>)) "factorial.cpp":14:10 82 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "factorial.cpp":14:10 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("_ZSt4cout") [flags 0x40]  <var_decl 0x7f23e54a1990 cout>)
        (nil)))
(call_insn 31 30 33 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSolsEi") [flags 0x41]  <function_decl 0x7f23e5780600 operator<<>) [0 operator<< S1 A8])
            (const_int 0 [0]))) "factorial.cpp":14:10 1013 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 33 31 35 5 (set (reg:DI 1 dx [93])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref:DI ("_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_") [flags 0x41]  <function_decl 0x7f23e578f700 endl>)
                    ] UNSPEC_GOTPCREL)) [24  S8 A8])) "factorial.cpp":14:15 discrim 1 82 {*movdi_internal}
     (nil))
(insn 35 33 36 5 (set (reg:DI 4 si)
        (reg:DI 1 dx [92])) "factorial.cpp":14:15 discrim 1 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_") [flags 0x41]  <function_decl 0x7f23e578f700 endl>)
        (nil)))
(insn 36 35 37 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:83 _2 ] [83])) "factorial.cpp":14:15 discrim 1 82 {*movdi_internal}
     (nil))
(call_insn 37 36 38 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSolsEPFRSoS_E") [flags 0x41]  <function_decl 0x7f23e576f400 operator<<>) [0 operator<< S1 A8])
            (const_int 0 [0]))) "factorial.cpp":14:15 discrim 1 1013 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 38 37 45 5 (set (reg:SI 0 ax [orig:84 _13 ] [84])
        (const_int 0 [0])) "factorial.cpp":15:12 83 {*movsi_internal}
     (nil))
(insn 45 38 46 5 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [4 D.53841+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 1 dx [96]))
        ]) "factorial.cpp":16:1 1387 {stack_protect_test_1_di}
     (nil))
(jump_insn 46 45 53 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "factorial.cpp":16:1 995 {*jcc}
     (nil)
 -> 49)
(note 53 46 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 47 53 48 6 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f23e539ba00 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "factorial.cpp":16:1 1002 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
(barrier 48 47 49)
(code_label 49 48 54 7 5 (nil) [1 uses])
(note 54 49 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 51 54 57 7 (use (reg/i:SI 0 ax)) "factorial.cpp":16:1 -1
     (nil))
(note 57 51 0 NOTE_INSN_DELETED)
